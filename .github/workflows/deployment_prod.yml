name: CI/CD Flask App Production Deployment

on:
  release:
    types: [published]

jobs:
  build-test-deploy-prod:
    runs-on: ubuntu-latest

    steps:
    - name: Skip if not released from staging branch
      if: github.event.release.target_commitish != 'staging'
      run: |
        echo "Release was not created from 'staging'. Skipping deployment."
        exit 0

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.release.target_commitish }}

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Create .env file with MONGO_URI for tests
      run: echo "MONGO_URI=${{ secrets.MONGOURI }}" > .env

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      env:
        MONGO_URI: ${{ secrets.MONGOURI }}
      run: pytest test_app.py

    - name: Deploy to Production EC2 instance
      if: success()
      env:
        EC2_PRIVATE_IP: ${{ secrets.EC2_PRIVATE_IP_PROD_A06 }}
        MONGO_URI: ${{ secrets.MONGOURI }}
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      run: |
        echo "Deploying to Production EC2 at $EC2_PRIVATE_IP"

        # Write SSH private key to a file
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem

        ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${EC2_PRIVATE_IP} << EOF
          echo "Updating system..."
          sudo apt update -y

          echo "Installing dependencies..."
          sudo apt install -y python3 python3-venv python3-pip nginx git

          echo "Cloning the repo..."
          rm -rf Assignment_06_DevOps
          git clone https://github.com/JOYSTON-LEWIS/Assignment_06_DevOps.git
          cd Assignment_06_DevOps

          echo "Setting up virtual environment and installing requirements..."
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

          echo "Creating .env file with Mongo URI..."
          echo "MONGO_URI=${MONGO_URI}" > .env

          echo "Killing existing Flask app if running..."
          pkill -f "python app.py" || true

          echo "Starting Flask app with nohup..."
          nohup python3 app.py > output.log 2>&1 &

          echo "Configuring NGINX..."
          cat << 'NGINX_CONF' | sudo tee /etc/nginx/sites-available/flaskapp
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://127.0.0.1:5000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              }
          }
          NGINX_CONF

          echo "Enabling NGINX config..."
          sudo ln -sf /etc/nginx/sites-available/flaskapp /etc/nginx/sites-enabled/flaskapp
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t && sudo systemctl restart nginx
        EOF

        rm -f private_key.pem
